---
  - name: Provision EC2 Instance
    hosts: local
    connection: local
    gather_facts: False
    tags: provisioning

    vars:
      params:
        exact_count:      1

    tasks:

      - name: Gather EC2 facts.
        ec2_remote_facts:
          aws_secret_key: "{{ secret_access_key }}"
          aws_access_key: "{{ access_key_id }}"
          region: "{{ region }}"
          filters:
            "tag:Name": go-IPN_Listener
        register: ec2_facts

      - name: Launch new EC2 Instance if none running
        local_action:
          module: ec2
          aws_access_key: "{{ access_key_id }}"
          aws_secret_key: "{{ secret_access_key }}"
          group: "{{ security_group }}"
          instance_type: "{{ instance_type }}"
          image: "{{ image }}"
          region: "{{ region }}"
          keypair: "{{ keypair }}"
          exact_count: "{{ params['exact_count'] }}"
          instance_tags: '{"Name": "go-IPN_Listener"}'
          count_tag: '{"Name": "go-IPN_Listener"}'
          wait: true
        register: ec2_result
        notify:
          - Add the newly created EC2 instance to the local host group
          - Wait for SSH to come up
        with_together:
          - "{{ [0] | map('extract', (ec2_facts.instances | default([{'state': 'undefined'}], true)), 'state') | list }}"
        when: (ec2_facts.instances | length == 0) or ((item.0 != "stopped") and (item.0 != "running"))

      - name: Scattergun
        debug: var=ec2_result
        #      - name: Debug ec2.instances
        #        debug:
        #          msg: "{{ item }}"
        #        with_items: "{{ ec2_result.instances | default({}) }}"

    handlers:

      - name: Add the newly created EC2 instance to the local host group
        local_action: lineinfile 
                      dest="./hosts.ini"
                      regexp="{{ item.public_ip }}"
                      insertafter="[ec2]"
                      line="{{ item.public_ip }} ansible_ssh_private_key_file=/home/spendless/.ec2/{{ keypair }}.pem ansible_ssh_user=ubuntu"
                      state=present
        with_items: "{{ ec2_result.results.0.instances | list | default({}) }}"

      - name: Wait for SSH to come up
        local_action: wait_for
                      host={{ item.public_ip }}
                      port=22
                      state=started
        with_items: "{{ ec2_result.results.0.instances | list | default({}) }}"
