---
  - name: Restart the EC2-go Instance
    hosts: local
    connection: local
    gather_facts: False
    tags: provisioning

    # Necessary Variables for restarting a stopped EC2-go Instance
    vars:
      params:
        instance_type:    t2.micro
        region:           ap-southeast-1
        image:            ami-1c2e887f
        user:             ubuntu
        security_group:   vagrantbox
        keypair:          sg-ec2-vagrant
        exact_count:      1

    tasks:

      - name: Gather EC2 facts.
        ec2_remote_facts:
          aws_secret_key: "{{ secret_access_key }}"
          aws_access_key: "{{ access_key_id }}"
          region: "{{ params['region'] }}"
          filters:
            "tag:Name": ec2-go
        register: ec2_facts

      - name: Restart stopped EC2-go Instance
        local_action:
          module: ec2
          aws_access_key: "{{ access_key_id }}"
          aws_secret_key: "{{ secret_access_key }}"
          group: "{{params['security_group']}}"
          instance_ids: "{{ item.1 }}"
          region: "{{params['region']}}"
          state: running
          wait: true
        register: ec2_result
        with_together:
          - "{{ [0]|map('extract', ec2_facts.instances, 'state')|list }}"
          - "{{ [0]|map('extract', ec2_facts.instances, 'id')|list }}"
        when: (item.0 == "stopped") or (item.0 == "terminated")

        #      - debug: var=ec2_result.results.0.instances.0
        #      - debug: msg="{{ ec2_result.results.0.instances | list }}"

      - name: Add the newly created EC2-go instance to the ec2 host group
        local_action: lineinfile 
                      dest="./hosts.ini"
                      regexp="{{ item.public_ip }}"
                      insertafter="[ec2]"
                      line="{{ item.public_ip }} ansible_ssh_private_key_file=/home/spendless/.ec2/{{params['keypair']}}.pem"
                      state=present
        with_items: "{{ ec2_result.results.0.instances | list | default({}) }}"

        #          - "{{ [0]|map('extract', ec2_result.instances, 'id')|list }}"

      - name: Wait for SSH to come up
        local_action: wait_for
                      host={{ item.public_ip }}
                      port=22
                      state=started
        with_items: "{{ ec2_result.results.0.instances | list | default({}) }}"


#- name: Add instances to local memory.
#  add_host:
#    groups: "{{ item.0 }}"
#    hostname: "{{ item.1 }}"
#  tags:
#    - instances
#  with_together:
#    - "{{ ec2_facts.instances|selectattr('state', 'equalto', 'running')|map(attribute='tags.Name')|list }}"
#    - "{{ ec2_facts.instances|selectattr('state', 'equalto', 'running')|map(attribute='private_ip_address')|list }}"
